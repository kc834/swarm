// Generated by gencpp from file slugs_ros/SlugsSynthesisGoal.msg
// DO NOT EDIT!


#ifndef SLUGS_ROS_MESSAGE_SLUGSSYNTHESISGOAL_H
#define SLUGS_ROS_MESSAGE_SLUGSSYNTHESISGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace slugs_ros
{
template <class ContainerAllocator>
struct SlugsSynthesisGoal_
{
  typedef SlugsSynthesisGoal_<ContainerAllocator> Type;

  SlugsSynthesisGoal_()
    : ltl_filename()
    , options()
    , output_filename()  {
    }
  SlugsSynthesisGoal_(const ContainerAllocator& _alloc)
    : ltl_filename(_alloc)
    , options(_alloc)
    , output_filename(_alloc)  {
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ltl_filename_type;
  _ltl_filename_type ltl_filename;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _options_type;
  _options_type options;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _output_filename_type;
  _output_filename_type output_filename;




  typedef boost::shared_ptr< ::slugs_ros::SlugsSynthesisGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::slugs_ros::SlugsSynthesisGoal_<ContainerAllocator> const> ConstPtr;

}; // struct SlugsSynthesisGoal_

typedef ::slugs_ros::SlugsSynthesisGoal_<std::allocator<void> > SlugsSynthesisGoal;

typedef boost::shared_ptr< ::slugs_ros::SlugsSynthesisGoal > SlugsSynthesisGoalPtr;
typedef boost::shared_ptr< ::slugs_ros::SlugsSynthesisGoal const> SlugsSynthesisGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::slugs_ros::SlugsSynthesisGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::slugs_ros::SlugsSynthesisGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace slugs_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'slugs_ros': ['/home/kchaudhari/catkin_ws/src/LTL_stack/slugs_ros/msg', '/home/kchaudhari/catkin_ws/devel/share/slugs_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::slugs_ros::SlugsSynthesisGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::slugs_ros::SlugsSynthesisGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::slugs_ros::SlugsSynthesisGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::slugs_ros::SlugsSynthesisGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slugs_ros::SlugsSynthesisGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slugs_ros::SlugsSynthesisGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::slugs_ros::SlugsSynthesisGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8d645ed2f1784ce7a0776c3763bd99cd";
  }

  static const char* value(const ::slugs_ros::SlugsSynthesisGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8d645ed2f1784ce7ULL;
  static const uint64_t static_value2 = 0xa0776c3763bd99cdULL;
};

template<class ContainerAllocator>
struct DataType< ::slugs_ros::SlugsSynthesisGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "slugs_ros/SlugsSynthesisGoal";
  }

  static const char* value(const ::slugs_ros::SlugsSynthesisGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::slugs_ros::SlugsSynthesisGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# inputs\n\
string ltl_filename  #.slugsin or .structuredSlugs\n\
string[] options\n\
string output_filename\n\
";
  }

  static const char* value(const ::slugs_ros::SlugsSynthesisGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::slugs_ros::SlugsSynthesisGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ltl_filename);
      stream.next(m.options);
      stream.next(m.output_filename);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct SlugsSynthesisGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::slugs_ros::SlugsSynthesisGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::slugs_ros::SlugsSynthesisGoal_<ContainerAllocator>& v)
  {
    s << indent << "ltl_filename: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ltl_filename);
    s << indent << "options[]" << std::endl;
    for (size_t i = 0; i < v.options.size(); ++i)
    {
      s << indent << "  options[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.options[i]);
    }
    s << indent << "output_filename: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.output_filename);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SLUGS_ROS_MESSAGE_SLUGSSYNTHESISGOAL_H
