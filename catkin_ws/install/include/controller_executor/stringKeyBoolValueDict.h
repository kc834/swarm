// Generated by gencpp from file controller_executor/stringKeyBoolValueDict.msg
// DO NOT EDIT!


#ifndef CONTROLLER_EXECUTOR_MESSAGE_STRINGKEYBOOLVALUEDICT_H
#define CONTROLLER_EXECUTOR_MESSAGE_STRINGKEYBOOLVALUEDICT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace controller_executor
{
template <class ContainerAllocator>
struct stringKeyBoolValueDict_
{
  typedef stringKeyBoolValueDict_<ContainerAllocator> Type;

  stringKeyBoolValueDict_()
    : keys()
    , values()  {
    }
  stringKeyBoolValueDict_(const ContainerAllocator& _alloc)
    : keys(_alloc)
    , values(_alloc)  {
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _keys_type;
  _keys_type keys;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _values_type;
  _values_type values;




  typedef boost::shared_ptr< ::controller_executor::stringKeyBoolValueDict_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::controller_executor::stringKeyBoolValueDict_<ContainerAllocator> const> ConstPtr;

}; // struct stringKeyBoolValueDict_

typedef ::controller_executor::stringKeyBoolValueDict_<std::allocator<void> > stringKeyBoolValueDict;

typedef boost::shared_ptr< ::controller_executor::stringKeyBoolValueDict > stringKeyBoolValueDictPtr;
typedef boost::shared_ptr< ::controller_executor::stringKeyBoolValueDict const> stringKeyBoolValueDictConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::controller_executor::stringKeyBoolValueDict_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::controller_executor::stringKeyBoolValueDict_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace controller_executor

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'controller_executor': ['/home/kchaudhari/catkin_ws/src/LTL_stack/controller_executor/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::controller_executor::stringKeyBoolValueDict_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::controller_executor::stringKeyBoolValueDict_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controller_executor::stringKeyBoolValueDict_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controller_executor::stringKeyBoolValueDict_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller_executor::stringKeyBoolValueDict_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller_executor::stringKeyBoolValueDict_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::controller_executor::stringKeyBoolValueDict_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c60aeeeca22f58984ac5f13e4b5831c1";
  }

  static const char* value(const ::controller_executor::stringKeyBoolValueDict_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc60aeeeca22f5898ULL;
  static const uint64_t static_value2 = 0x4ac5f13e4b5831c1ULL;
};

template<class ContainerAllocator>
struct DataType< ::controller_executor::stringKeyBoolValueDict_<ContainerAllocator> >
{
  static const char* value()
  {
    return "controller_executor/stringKeyBoolValueDict";
  }

  static const char* value(const ::controller_executor::stringKeyBoolValueDict_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::controller_executor::stringKeyBoolValueDict_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] keys\n\
bool[] values\n\
";
  }

  static const char* value(const ::controller_executor::stringKeyBoolValueDict_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::controller_executor::stringKeyBoolValueDict_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.keys);
      stream.next(m.values);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct stringKeyBoolValueDict_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::controller_executor::stringKeyBoolValueDict_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::controller_executor::stringKeyBoolValueDict_<ContainerAllocator>& v)
  {
    s << indent << "keys[]" << std::endl;
    for (size_t i = 0; i < v.keys.size(); ++i)
    {
      s << indent << "  keys[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.keys[i]);
    }
    s << indent << "values[]" << std::endl;
    for (size_t i = 0; i < v.values.size(); ++i)
    {
      s << indent << "  values[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.values[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROLLER_EXECUTOR_MESSAGE_STRINGKEYBOOLVALUEDICT_H
