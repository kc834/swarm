#!/usr/bin/env python

import rospy
import geometry_msgs.msg
import argparse
import random
from nav_msgs.msg import Odometry
import time
import math
import numpy
import ViconTrackerPoseHandler as vt

odometry = None
init_odom = None
theta_cal=0


def save_odometry(data):
    global odometry

    # save initial
    if odometry is None:
        global init_odom
        init_odom = data.pose.pose

    odometry =data.pose.pose

#Define the waypoints to be visited and the speed at which to visit them (the waypoints depend on which sphero it is)
    # magnitude min 5 for lab ground
    # magnitude min 30 for lab carpet
#if rospy.get_namespace()=="/sphero_rgw_group/":
#	waypoints=numpy.array([ [-1,1], [-1,1] ])
#elif rospy.get_namespace()=="/sphero_ggw_group/":
#	waypoints=numpy.array([ [1,1], [-1,1] ])
waypoints=numpy.array([ [1,1], [-1,1] ])

size_waypoints=waypoints.shape #[m,n] length and width of waypoints
num_waypoints=size_waypoints[0] #first entry is length (width is 2-(x,y))
vel_mag=100


if __name__=="__main__":
    #parser = argparse.ArgumentParser(description="Test Sphero location")
    #args, unknown = parser.parse_known_args()
    rospy.init_node("test_vel")

    # publish to topics
    pub = rospy.Publisher('cmd_vel', geometry_msgs.msg.Twist, queue_size=10, latch=True)
    rate = rospy.Rate(10) # set publish rate

    # subscribe to odometry data
    rospy.Subscriber('odom', Odometry, callback=save_odometry)
    
    #Initialize the sphero as a vicon tracked object
    a = vt.ViconTrackerPoseHandler(None, None, "",51001, "Sphero2")

#loop through the goal points and move to all of them
for ind in range(0,num_waypoints):
#index of first goal is 0, last is num_waypoints-1
    #extract the current goal location
    loc_goal=[]
    loc_goal.append(waypoints[ind][0])
    loc_goal.append(waypoints[ind][1])	
    print ind
    print "goal location"
    print loc_goal

    #get the sphero's current location from vicon
    rate.sleep()
    loc_init=a.getPose()
    loc=loc_init
    print "initial location"
    print loc_init

    #Calculate the required vel_msg to reach the goal point from the current location in the vicon frame

    theta=math.atan((loc_goal[1]-loc_init[1])/(loc_goal[0]-loc_init[0]))
    v_x_V=vel_mag*math.cos(theta)
    v_y_V=vel_mag*math.sin(theta)

#convert the velocity message to the sphero frame using the angle from calibration
    v_vect_V=numpy.array([[v_x_V],[v_y_V]])
    R_SV=numpy.array([ [math.cos(theta_cal),math.sin(theta_cal)],[-math.sin(theta_cal), math.cos(theta_cal)] ])
    v_vect_S=numpy.dot(R_SV,v_vect_V)
    v_x_S=v_vect_S[0]
    v_y_S=v_vect_S[1]

    #Define the vel_msg command to send to the sphero

    vel_msg = geometry_msgs.msg.Twist(geometry_msgs.msg.Vector3(v_vect_S[0],v_vect_S[1],0), \
                                      geometry_msgs.msg.Vector3(0,0,0))

    vel_msg_zero = geometry_msgs.msg.Twist(geometry_msgs.msg.Vector3(0,0,0), \
                                      geometry_msgs.msg.Vector3(0,0,0))
    print vel_msg	
    #rospy.loginfo("Velocity: {0}".format(vel_msg))
    count=0
   #while abs((loc[0]-loc_init[0]))<abs((loc_goal[0]-loc_init[0])) and abs((loc[1]-loc_init[1]))<abs((loc_goal[1]-loc_init[1])): # not at goal point--EDIT THIS
    dist=math.hypot((loc_goal[0]-loc[0]),(loc_goal[1]-loc[1]))
    closeEnough=0.2
    while dist>closeEnough:
	if count==0:
		print "entered"
        loc=a.getPose()
	print loc
    	dist=math.hypot((loc_goal[0]-loc[0]),(loc_goal[1]-loc[1]))
        pub.publish(vel_msg)
	count=count+1

#rospy.loginfo("Last Odometry: {0}".format(odometry))
#rospy.loginfo("Last Odometry: {0}".format(odometry))
